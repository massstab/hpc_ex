
#################################################################
#                                                               #
#            CrayPat-lite Performance Statistics                #
#                                                               #
#################################################################

CrayPat/X:  Version 20.10.0 Revision 7ec62de47  09/16/20 16:54:26
Experiment:                  lite  lite-samples
Number of PEs (MPI ranks):      1
Numbers of PEs per Node:        1
Numbers of Threads per PE:      1
Number of Cores per Socket:    12
Execution start time:  Sat Apr  3 23:53:52 2021
System name and speed:  nid02357  2.601 GHz (nominal)
Intel Haswell    CPU  Family:  6  Model: 63  Stepping:  2
DRAM:  64 GiB DDR4-2400 on 2.6 GHz nodes



Avg Process Time:         16.21 secs         
High Memory:               22.1 MiBytes 22.1 MiBytes per PE
Observed CPU clock boost: 131.9 %      
Percent cycles stalled:    48.5 %      
Instr per Cycle:           1.84

Notes for table 1:

  This table shows functions that have significant exclusive sample
    hits, averaged across ranks.
  For further explanation, see the "General table notes" below,
    or use:  pat_report -v -O samp_profile ...

Table 1:  Profile by Function

  Samp% |    Samp | Imb. |  Imb. | Group
        |         | Samp | Samp% |  Function=[MAX10]
       
 100.0% | 1,615.0 |   -- |    -- | Total
|-----------------------------------------------------------
|  85.1% | 1,374.0 |   -- |    -- | USER
||----------------------------------------------------------
||  59.1% |   955.0 |   -- |    -- | forces
||  25.9% |   419.0 |   -- |    -- | std::vector<>::operator[]
||==========================================================
|  14.9% |   241.0 |   -- |    -- | MATH
||----------------------------------------------------------
||  14.9% |   241.0 |   -- |    -- | sqrt
|===========================================================

Notes for table 2:

  This table shows functions, and line numbers within functions, that
    have significant exclusive sample hits, averaged across ranks.
  For further explanation, see the "General table notes" below,
    or use:  pat_report -v -O samp_profile+src ...

Table 2:  Profile by Group, Function, and Line

  Samp% |    Samp | Imb. |  Imb. | Group
        |         | Samp | Samp% |  Function=[MAX10]
        |         |      |       |   Source
        |         |      |       |    Line
       
 100.0% | 1,615.0 |   -- |    -- | Total
|-----------------------------------------------------------------------------
|  85.1% | 1,374.0 |   -- |    -- | USER
||----------------------------------------------------------------------------
||  59.1% |   955.0 |   -- |    -- | forces
3|        |         |      |       |  hpc_ex-git/hpc_ex/exercise_session_05/forces.cpp
||||--------------------------------------------------------------------------
4|||   1.1% |    17.0 |   -- |    -- | line.8
4|||   3.2% |    51.0 |   -- |    -- | line.10
4|||   3.1% |    50.0 |   -- |    -- | line.11
4|||   3.5% |    56.0 |   -- |    -- | line.12
4|||   5.9% |    95.0 |   -- |    -- | line.13
4|||  25.7% |   415.0 |   -- |    -- | line.14
4|||  10.7% |   172.0 |   -- |    -- | line.15
4|||   2.8% |    45.0 |   -- |    -- | line.16
4|||   2.8% |    45.0 |   -- |    -- | line.17
||||==========================================================================
||  25.9% |   419.0 |   -- |    -- | std::vector<>::operator[]
3|        |         |      |       |  include/g++/bits/stl_vector.h
||||--------------------------------------------------------------------------
4|||   8.9% |   144.0 |   -- |    -- | line.1043
4|||  12.9% |   209.0 |   -- |    -- | line.1046
4|||   4.1% |    66.0 |   -- |    -- | line.1047
||============================================================================
|  14.9% |   241.0 |   -- |    -- | MATH
||----------------------------------------------------------------------------
||  14.9% |   241.0 |   -- |    -- | sqrt
|=============================================================================

Observation:  MPI utilization

    No suggestions were made because each node has only one rank.


Observation:  Program sensitivity to memory latency

    The relatively low memory bandwidth utilization but significant rate
    of stalls in the program suggest that its performance is limited by
    memory latency.
    It could be beneficial to improve prefetching in loops in functions
    high in the profile, by modifying compiler-generated prefetches or
    inserting directives into the source code.


Notes for table 3:

  This table shows memory traffic for numa nodes, taking for each numa
    node the maximum value across nodes. It also shows the balance in
    memory traffic by showing the top 3 and bottom 3 node values.
  For further explanation, see the "General table notes" below,
    or use:  pat_report -v -O mem_bw ...

Table 3:  Memory Bandwidth by Numanode

  Memory |   Local |    Thread |  Memory |  Memory | Numanode
 Traffic |  Memory |      Time | Traffic | Traffic | 
  GBytes | Traffic |           |  GBytes |       / | 
         |  GBytes |           |   / Sec | Nominal | 
         |         |           |         |    Peak | 
|--------------------------------------------------------------
|    0.00 |    0.00 | 16.193383 |    0.00 |    0.0% | numanode.0
|==============================================================

Notes for table 4:

  This table shows energy and power usage for the nodes with the
    maximum, mean, and minimum usage, as well as the sum of usage over
    all nodes.
    Energy and power for accelerators is also shown, if applicable.
  For further explanation, see the "General table notes" below,
    or use:  pat_report -v -O program_energy ...

Table 4:  Program energy and power usage (from Cray PM)

   Node |     Node |   Process | Total
 Energy |    Power |      Time | 
    (J) |      (W) |           | 
--------------------------------------
  1,552 |   95.747 | 16.209435 | Total
======================================
Program invocation:  nbody

For a complete report with expanded tables and notes, run:
  pat_report /users/dlinder/hpc_ex-git/hpc_ex/exercise_session_05/nbody+19413-2357s

For help identifying callers of particular functions:
  pat_report -O callers+src /users/dlinder/hpc_ex-git/hpc_ex/exercise_session_05/nbody+19413-2357s
To see the entire call tree:
  pat_report -O calltree+src /users/dlinder/hpc_ex-git/hpc_ex/exercise_session_05/nbody+19413-2357s

For interactive, graphical performance analysis, run:
  app2 /users/dlinder/hpc_ex-git/hpc_ex/exercise_session_05/nbody+19413-2357s

================  End of CrayPat-lite output  ==========================
